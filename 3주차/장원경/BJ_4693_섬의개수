import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BJ_4693_섬의개수 {
	static int w,h;
	static int map[][];
	static boolean v[][];
	static int dr[]= {-1,1,0,0,-1,-1,1,1};
	static int dc[]= {0,0,-1,1,-1,1,-1,1};
	public static void main(String[] args) throws IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		w=1; h=1;
		while(!(w==0 && h==0)) {
		StringTokenizer st= new StringTokenizer(br.readLine());
		w=Integer.parseInt(st.nextToken());
		h=Integer.parseInt(st.nextToken());
		if(w==0 && h==0) break;
		v=new boolean[h][w];
		map=new int[h][w];
		for(int i=0;i<h;i++) {
			StringTokenizer sb= new StringTokenizer(br.readLine());
			for(int j=0;j<w;j++) {
				map[i][j]=Integer.parseInt(sb.nextToken());
			}
		}
		int cnt=0;
		for(int i=0;i<h;i++) {
			for(int j=0;j<w;j++) {
				if(map[i][j]==1) {
					dfs(i,j);
					cnt++;
				}
			}
		}
		System.out.println(cnt);
		}
	}
	private static void dfs(int r, int c) {
		
			v[r][c]=true;
			map[r][c]=7;
		for(int d=0;d<8;d++) {
			
			int nr=r+dr[d];
			int nc=c+dc[d];
			
			if(!check(nr,nc)) continue;
			
			if(map[nr][nc]==1 && !v[nr][nc]) {
				dfs(nr,nc);
			}
		}
	}
	private static boolean check(int nr, int nc) {
		return nr>=0 && nr<h && nc>=0 && nc<w;
	}
}
